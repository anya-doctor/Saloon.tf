{
  "name": "steam-tradeoffers",
  "version": "0.2.0",
  "dependencies": {
    "request": "2.27.0",
    "cheerio": "*",
    "long": "*"
  },
  "readme": "# Steam Trade Offers for Node.js\n\nAllows you to automate Steam trading using trade offers in Node.js. It was designed with [node-steam](https://github.com/seishun/node-steam) in mind, but does not depend on it, so you can use it separately if you can supply it with session information. Some of the methods of the library are wrappers for Steam Web API.\n\n__Note__: By using this library you automatically agree to [Steam API Terms of Use](http://steamcommunity.com/dev/apiterms)\n\n# Installation\n\n```\nnpm install git://github.com/Alex7Kom/node-steam-tradeoffers.git\n```\n\n# Usage\nInstantiate a SteamTradeOffers object...\n\n```js\nvar SteamTradeOffers = require('steam-tradeoffers');\nvar offers = new SteamTradeOffers();\n```\n\n...then setup session:\n\n```js\noffers.setup(sessionID, cookies);\n```\n\n* `sessionID` is a valid web session ID. In node-steam, you can use the `webSessionID` event to get it.\n* `cookies` is an array of cookies. In node-steam, you can use the `webLogOn` method to get it.\n\nThis setup will automatically register and retrieve Steam API key for you.\n\nThe `storehouse.js` file contains an example of library usage. You'll need to install [node-steam](https://github.com/seishun/node-steam) in order to run it.\n\n# Methods\n\nAll callbacks will be supplied with error as the first argument or null if no errors occured.\n\n## loadMyInventory(appid, contextid, callback)\n\nLoads your inventory for the given app and context. For example, use 440 and 2 for TF2 and 570 and 2 for Dota 2. The second argument to `callback` will be an array of item objects in case of success.\n\n## loadPartnerInventory(partnerSteamId, appid, contextid, callback)\n\nLoads your partner inventory for the given app and context.\n\n## makeOffer(options[, callback])\n\nMakes a trade offer to the partner. `options` is an object of the following input params:\n\n* `partnerAccountId` or `partnerSteamId`, you need only one of those.\n* `accessToken` (optional) is a token from the public Trade URL of the partner.\n* `itemsFromMe` are the items you will lose in the trade.\n* `itemsFromThem` are the items you will receive in the trade.\n* `counteredTradeOffer` (optional) is the ID to a trade offer you are countering.\n* `message` (optional) is a message to include in the offer.\n\n`itemsFromMe` and `itemsFromThem` both are arrays of item objects that look like this:\n\n```json\n{\n    \"appid\": 440,\n    \"contextid\": 2,\n    \"amount\": 1,\n    \"assetid\": \"1627590398\"\n}\n```\n\nIf success the second param to `callback` will be an object with `tradeofferid` of the newly created trade offer.\n\n## getOffers(options, callback)\n## getOffer(options, callback)\n\nThe first method loads a list of trade offers, and the second loads just a single offer. `options` is an object of input params listed on the page [Steam Web API/IEconService](https://developer.valvesoftware.com/wiki/Steam_Web_API/IEconService). The second argument to `callback` will be an object that Steam Web API returns. The only thing to note is that the wrapper adds a property `steamid_other` with the SteamID of the trade partner to each `CEcon_TradeOffer` object in received trades.\n\n## declineOffer(tradeofferid[, callback])\n## acceptOffer(tradeofferid[, callback])\n## cancelOffer(tradeofferid[, callback])\n\n`declineOffer` or `acceptOffer` that was sent to you. `cancelOffer` that you sent. The second argument to `callback` will be an object with response from Steam, but don't expect anything meaningful in it.\n\n# How to contribute\n\nI appreciate your time and efforts you put in your pull requests, but please follow next simple rules so your efforts wouldn't be in vain.\n\n  1. Please consider creating an issue ticket (bug report or feature request) before doing any code. Clearly state your issue or changes and I'll do my best to implement a new feature (if it fits the library) or fix the library.\n\n  2. If you did some research and/or reverse engineering, that is great! However, please do not put the results in the code right away, create an issue.\n\n  3. If after all you decided that you really need to push your code, please follow the existing code formatting, do not change any interfaces without need, use common sense when adding features so they won't break the existing functionality, test your code prior to submission, update README accordingly, and squash all your changes using `git rebase` into one commit.\n\nI reserve the right to close any pull request and/or rewrite your feature or fix myself.\n\nThank you.\n\n# License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2014 Alexey Komarov <alex7kom@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "description": "Allows you to automate Steam trading using trade offers in Node.js. It was designed with [node-steam](https://github.com/seishun/node-steam) in mind, but does not depend on it, so you can use it separately if you can supply it with session information. Some of the methods of the library are wrappers for Steam Web API.",
  "_id": "steam-tradeoffers@0.2.0",
  "dist": {
    "shasum": "fbc2ae1da65f10d34c8acaa37bd5bfa7039bb2cb"
  },
  "_resolved": "git://github.com/Alex7Kom/node-steam-tradeoffers.git#26a349e23642f9924359a44b7e6263aef8493120",
  "_from": "git://github.com/Alex7Kom/node-steam-tradeoffers.git"
}
